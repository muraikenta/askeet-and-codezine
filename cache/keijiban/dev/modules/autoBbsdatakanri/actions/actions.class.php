<?php
// auto-generated by sfPropelAdmin
// date: 2014/02/18 00:03:39
?>
<?php

/**
 * autoBbsdatakanri actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoBbsdatakanri
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 9855 2008-06-25 11:26:01Z FabianLange $
 */
class autoBbsdatakanriActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('bbsdatakanri', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/bbsdata/filters');

    // pager
    $this->pager = new sfPropelPager('Bbsdata', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', $this->getUser()->getAttribute('page', 1, 'sf_admin/bbsdata')));
    $this->pager->init();
    // save page
    if ($this->getRequestParameter('page')) {
        $this->getUser()->setAttribute('page', $this->getRequestParameter('page'), 'sf_admin/bbsdata');
    }
  }

  public function executeCreate()
  {
    return $this->forward('bbsdatakanri', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('bbsdatakanri', 'edit');
  }

  public function executeEdit()
  {
    $this->bbsdata = $this->getBbsdataOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateBbsdataFromRequest();

      $this->saveBbsdata($this->bbsdata);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('bbsdatakanri/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('bbsdatakanri/list');
      }
      else
      {
        return $this->redirect('bbsdatakanri/edit?id='.$this->bbsdata->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->bbsdata = BbsdataPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->bbsdata);

    try
    {
      $this->deleteBbsdata($this->bbsdata);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Bbsdata. Make sure it does not have any associated items.');
      return $this->forward('bbsdatakanri', 'list');
    }

    return $this->redirect('bbsdatakanri/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->bbsdata = $this->getBbsdataOrCreate();
    $this->updateBbsdataFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveBbsdata($bbsdata)
  {
    $bbsdata->save();

  }

  protected function deleteBbsdata($bbsdata)
  {
    $bbsdata->delete();
  }

  protected function updateBbsdataFromRequest()
  {
    $bbsdata = $this->getRequestParameter('bbsdata');

    if (isset($bbsdata['title']))
    {
      $this->bbsdata->setTitle($bbsdata['title']);
    }
    if (isset($bbsdata['author']))
    {
      $this->bbsdata->setAuthor($bbsdata['author']);
    }
    if (isset($bbsdata['mail']))
    {
      $this->bbsdata->setMail($bbsdata['mail']);
    }
    if (isset($bbsdata['url']))
    {
      $this->bbsdata->setUrl($bbsdata['url']);
    }
    if (isset($bbsdata['body']))
    {
      $this->bbsdata->setBody($bbsdata['body']);
    }
    if (isset($bbsdata['passwd']))
    {
      $this->bbsdata->setPasswd($bbsdata['passwd']);
    }
    if (isset($bbsdata['parent_id']))
    {
      $this->bbsdata->setParentId($bbsdata['parent_id']);
    }
    if (isset($bbsdata['created_at']))
    {
      if ($bbsdata['created_at'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($bbsdata['created_at']))
          {
            $value = $dateFormat->format($bbsdata['created_at'], 'I', $dateFormat->getInputPattern('g'));
          }
          else
          {
            $value_array = $bbsdata['created_at'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->bbsdata->setCreatedAt($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->bbsdata->setCreatedAt(null);
      }
    }
  }

  protected function getBbsdataOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $bbsdata = new Bbsdata();
    }
    else
    {
      $bbsdata = BbsdataPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($bbsdata);
    }

    return $bbsdata;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/bbsdata');
      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/bbsdata/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/bbsdata/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/bbsdata/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/bbsdata/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/bbsdata/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['author_is_empty']))
    {
      $criterion = $c->getNewCriterion(BbsdataPeer::AUTHOR, '');
      $criterion->addOr($c->getNewCriterion(BbsdataPeer::AUTHOR, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['author']) && $this->filters['author'] !== '')
    {
      $c->add(BbsdataPeer::AUTHOR, strtr($this->filters['author'], '*', '%'), Criteria::LIKE);
    }
    if (isset($this->filters['id_is_empty']))
    {
      $criterion = $c->getNewCriterion(BbsdataPeer::ID, '');
      $criterion->addOr($c->getNewCriterion(BbsdataPeer::ID, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['id']) && $this->filters['id'] !== '')
    {
      $c->add(BbsdataPeer::ID, $this->filters['id']);
    }
    if (isset($this->filters['parent_id_is_empty']))
    {
      $criterion = $c->getNewCriterion(BbsdataPeer::PARENT_ID, '');
      $criterion->addOr($c->getNewCriterion(BbsdataPeer::PARENT_ID, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['parent_id']) && $this->filters['parent_id'] !== '')
    {
      $c->add(BbsdataPeer::PARENT_ID, $this->filters['parent_id']);
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/bbsdata/sort'))
    {
      $sort_column = BbsdataPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/bbsdata/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'bbsdata{id}' => 'Id:',
      'bbsdata{title}' => 'Title:',
      'bbsdata{author}' => 'Author:',
      'bbsdata{mail}' => 'Mail:',
      'bbsdata{url}' => 'Url:',
      'bbsdata{body}' => 'Body:',
      'bbsdata{passwd}' => 'Passwd:',
      'bbsdata{parent_id}' => 'Parent:',
      'bbsdata{created_at}' => 'Created at:',
    );
  }
}
